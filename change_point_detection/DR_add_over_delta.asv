%% System Matrices 
A = [0.96, 0.99, -0.88, 0.56;
     0, 0.98, 0.75, -0.65;
     0, 0, 0.97, 0.95;
     0, 0, 0, 0.94];
C = [1, 0, 0, 0;
     0, 0, 0, 0;
     0, 0, 1, 0;
     0, 0, 0, 0];

%% Simulation Parameters
T = 10000; % Total timesteps
r = 100; % Buffer size
sigma = 1; % Kernel parameter
change_point = 1000; % Change point at timestep 1000
max_detection_delay = 2000; % Maximum allowed detection delay (in timesteps)

Deltas = [0.05, 0.08, 0.1]; % Changed to previous Delta values
thresholds = 0.01:0.05:0.5; % Thresholds to test
num_repeats = 5; % Number of repetitions for averaging detection delay

% Define colors and markers for consistent plotting
colors = ['r', 'g', 'b']; % Colors for plotting
markers = ['o', 's', '^']; % Different markers for each Delta

figure;
hold on;

% Store detection delays and detection rates
avg_detection_delays = zeros(length(thresholds), length(Deltas));
detection_rates = zeros(length(thresholds), length(Deltas));

for delta_idx = 1:length(Deltas)
    Delta = Deltas(delta_idx);
    fprintf('Simulating for Delta = %f\n', Delta);
    detection_delays = zeros(length(thresholds), num_repeats); % Store detection delays for each repeat
    detections = zeros(length(thresholds), num_repeats); % Store whether detection occurred (1 if detected, 0 if not)

    for repeat = 1:num_repeats
        fprintf('Repeat %d for Delta = %f\n', repeat, Delta);
        % Reinitialize state and observation processes for each repeat
        Z = zeros(4, T); % State process
        Y = zeros(4, T); % Observation process

        % Noise
        W = mvnrnd(zeros(4,1), eye(4), T)'; % Actuation noise W ~ N(0, I)
        V = mvnrnd(zeros(4,1), eye(4), T)'; % Observation noise V ~ N(0, I)

        % Introduce mean shift after change point
        W(:, change_point+1:end) = W(:, change_point+1:end) + 0.01; % Mean shift after change point

        % Initial state
        Z(:, 1) = [1; 1; 1; 1]; 

        % Process Simulation
        for i = 2:T
            Z(:, i) = A * Z(:, i-1) + W(:, i);
            Y(:, i) = C * Z(:, i) + V(:, i);
        end

        % Reference Dataset
        D_h = Y(:, 1:200);

        % Initialize CUSUM test variables
        s_t = 0;
        s_min = 0;
        thresholds_crossed = false(1, length(thresholds));
        detection_times = NaN(1, length(thresholds));

        % Initialize vectors for MMD, residuals, and cumulative sum
        for t = (change_point/r + 1):floor(T/r) % Start computing CUSUM after change point
            % Update buffer with new window
            B_r = Y(:, (t-1)*r + 1:t*r);

            % Compute MMD value
            MMD_value = compute_MMD(B_r, D_h, sigma);

            % Calculate residual
            residual = MMD_value - Delta;

            % Update the test statistic
            s_t = s_t + residual;
            s_min = min(s_t, s_min);

            % Check for detection for each threshold
            for idx = 1:length(thresholds)
                threshold = thresholds(idx);
                if ~thresholds_crossed(idx) && (s_t - s_min) > threshold
                    detection_times(idx) = t * r - change_point;
                    thresholds_crossed(idx) = true;
                    % Mark as detected if within max_detection_delay
                    if detection_times(idx) <= max_detection_delay
                        detections(idx, repeat) = 1; % Mark as detected
                    end
                    fprintf('Threshold %f crossed at window %d (timestep %d)\n', threshold, t, t * r);
                end
            end

            % Break if all thresholds are crossed
            if all(thresholds_crossed)
                break;
            end
        end

        % Store detection delays for this repeat
        for idx = 1:length(thresholds)
            if ~isnan(detection_times(idx)) && detection_times(idx) > 0
                detection_delays(idx, repeat) = detection_times(idx);
            else
                detection_delays(idx, repeat) = T - change_point; % Set maximum delay if not detected
            end
        end
    end

    % Average detection delay across repetitions
    avg_detection_delays(:, delta_idx) = mean(detection_delays, 2);
    % Calculate detection rate across repetitions
    detection_rates(:, delta_idx) = mean(detections, 2);
    % Plot Detection Delay vs Threshold with distinct markers
    plot(thresholds, avg_detection_delays(:, delta_idx), ['-' markers(delta_idx)], ...
         'Color', colors(delta_idx), ...
         'DisplayName', sprintf('\Delta = %.2f', Delta), ...
         'MarkerSize', 8, ...
         'LineWidth', 1.5);
end

hold off;
title('Average Detection Delay vs Threshold for Different \Delta Values');
xlabel('Threshold');
ylabel('Average Detection Delay');
grid on;
legend('Location', 'best');

%% Plot ROC Curve
% Load false alarm rates from previous simulations or assume they are available
% Here, we assume false_alarm_rates is a matrix of size (length(thresholds), length(Deltas))
% Replace this with actual false alarm rates data if available
false_alarm_rates = avg_false_alarm_rate; % Load false alarm rates from workspace (10x3 matrix)

figure;
hold on;
for delta_idx = 1:length(Deltas)
    plot(false_alarm_rates(:, delta_idx), detection_rates(:, delta_idx), ['-' markers(delta_idx)], ...
         'Color', colors(delta_idx), ...
         'DisplayName', sprintf('\Delta = %.2f', Deltas(delta_idx)), ...
         'MarkerSize', 8, ...
         'LineWidth', 1.5);
end
hold off;
title('ROC Curve for Different \Delta Values');
xlabel('False Alarm Rate');
ylabel('Detection Rate');
grid on;
legend('Location', 'best');

%% MMD computation function
function mmd_value = compute_MMD(B_r, D_h, sigma)
    r = size(B_r, 2);
    h = size(D_h, 2);
    
    % Compute the three terms for MMD
    term1 = 0;
    for i = 1:r
        for j = 1:r
            term1 = term1 + kernel_rq(B_r(:,i), B_r(:,j), sigma);
        end
    end
    term1 = term1 / r^2;
    
    term2 = 0;
    for i = 1:h
        for j = 1:h
            term2 = term2 + kernel_rq(D_h(:,i), D_h(:,j), sigma);
        end
    end
    term2 = term2 / h^2;
    
    term3 = 0;
    for i = 1:r
        for j = 1:h
            term3 = term3 + kernel_rq(B_r(:,i), D_h(:,j), sigma);
        end
    end
    term3 = term3 / (r * h);
    
    % Compute MMD value
    mmd_value = sqrt(term1 + term2 - 2 * term3);
end

%% Rational quadratic kernel function
function k_val = kernel_rq(x, y, sigma)
    k_val = (1 + norm(x - y)^2 / (2 * sigma))^(-sigma);
end
